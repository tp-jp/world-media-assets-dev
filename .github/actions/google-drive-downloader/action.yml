name: "Google Drive File Downloader"
description: "Download files from Google Drive"
inputs:
  google_client_id:
    description: "Google Client ID"
    required: true
  google_client_secret:
    description: "Google Client Secret"
    required: true
  google_refresh_token:
    description: "Google Refresh Token"
    required: true
  file_ids:
    description: "JSON string containing file IDs and names"
    required: true
runs:
  using: composite
  steps:
    # Node.jsをセットアップ
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "20"

    # 必要なパッケージをインストール
    - name: Install dependencies
      run: npm install googleapis
      shell: bash

    # q: "'1y9KPjtCoz_AIZW76QJaHjV05wybLmU-m' in parents"
    # path: "./OuraiWorld/"
    # Google Driveから画像をダウンロード
    - name: Download images from Google Drive
      env:
        GOOGLE_CLIENT_ID: ${{ inputs.google_client_id }}
        GOOGLE_CLIENT_SECRET: ${{ inputs.google_client_secret }}
        GOOGLE_REFRESH_TOKEN: ${{ inputs.google_refresh_token }}
        IMAGE_FILE_IDS: ${{ inputs.file_ids }}
      run: |
        node << 'EOF'
        const {google} = require('googleapis');
        const fs = require('fs');
        const path = require('path');

        const oauth2Client = new google.auth.OAuth2(
          process.env.GOOGLE_CLIENT_ID,
          process.env.GOOGLE_CLIENT_SECRET,
        );
        oauth2Client.setCredentials({
          refresh_token: process.env.GOOGLE_REFRESH_TOKEN
        });

        const drive = google.drive({ version: 'v3', auth: oauth2Client });

        // 複数のファイルIDを指定
        const fileIds = JSON.parse(process.env.IMAGE_FILE_IDS);

        async function downloadFile(fileId, fileName) {
          const dest = fs.createWriteStream(fileName);
          const response = await drive.files.get({ fileId, alt: 'media' }, { responseType: 'stream' });
          return new Promise((resolve, reject) => {
            response.data
              .on('end', () => {
                console.log(`Downloaded ${fileName}`);
                resolve();
              })
              .on('error', err => {
                console.error(`Error downloading file ${fileName}:`, err);
                reject(err);
              })
              .pipe(dest);
          });
        }

        (async () => {
          for (const { id, name } of fileIds) {
            await downloadFile(id, name);
          }
        })();
        EOF
      shell: bash
